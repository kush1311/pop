#!/usr/bin/env python3
"""
Create a nicely formatted stock prediction report
based on the prediction data generated by test_predictions.py
"""

import os
import sys
import pandas as pd
from datetime import date, timedelta

def create_prediction_report():
    """Generate a markdown report from prediction data"""
    # Get current date for filenames
    today = date.today().strftime('%Y%m%d')
    predictions_file = os.path.join("test_predictions", f"predictions_{today}.csv")
    summary_file = os.path.join("test_predictions", f"summary_{today}.csv")
    output_file = os.path.join("test_predictions", f"market_report_{today}.md")
    
    # Check if prediction data exists
    if not os.path.exists(predictions_file) or not os.path.exists(summary_file):
        print(f"❌ Prediction data not found. Run test_predictions.py first.")
        return None
    
    # Load prediction data
    print(f"📊 Loading prediction data...")
    predictions_df = pd.read_csv(predictions_file)
    summary_df = pd.read_csv(summary_file)
    
    # Create report content
    report = []
    
    # Report header
    report.append(f"# Stock Market Forecast Report")
    report.append(f"### Generated on {date.today().strftime('%B %d, %Y')}")
    report.append(f"**Forecast Period:** {date.today().strftime('%B %d, %Y')} to {(date.today() + pd.Timedelta(days=90)).strftime('%B %d, %Y')}")
    report.append(f"**Data Source:** Yahoo Finance Historical Data + PPO Reinforcement Learning Models")
    report.append("")
    
    # Top buy recommendations
    report.append("## Top 5 Buy Recommendations")
    report.append("")
    report.append("| Symbol | Recommendation | Score | Short Term | Medium Term | Long Term |")
    report.append("|--------|----------------|-------|------------|-------------|-----------|")
    
    top_buys = summary_df.sort_values(by='Overall_Score', ascending=False).head(5)
    for _, row in top_buys.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Short_Term_Signal']} | {row['Medium_Term_Signal']} | {row['Long_Term_Signal']} |")
    
    report.append("")
    
    # Top sell recommendations
    report.append("## Top 5 Sell Recommendations")
    report.append("")
    report.append("| Symbol | Recommendation | Score | Short Term | Medium Term | Long Term |")
    report.append("|--------|----------------|-------|------------|-------------|-----------|")
    
    top_sells = summary_df.sort_values(by='Overall_Score', ascending=True).head(5)
    for _, row in top_sells.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Short_Term_Signal']} | {row['Medium_Term_Signal']} | {row['Long_Term_Signal']} |")
    
    report.append("")
    
    # Weekly outlook for key stocks
    report.append("## Next 7 Days Outlook for Key Stocks")
    report.append("")
    
    # Key stock symbols (some of the high-volume and high-interest stocks)
    key_stocks = ['RELIANCE', 'TCS', 'INFY', 'HDFCBANK', 'ICICIBANK', 'TATAMOTORS', 'ADANIENT']
    
    # Get today + 7 days range
    next_7_days = [(date.today() + pd.Timedelta(days=i)).strftime('%Y-%m-%d') for i in range(1, 8)]
    
    for symbol in key_stocks:
        report.append(f"### {symbol}")
        report.append("")
        report.append("| Date | Action | Forecasted Price |")
        report.append("|------|--------|-----------------|")
        
        # Filter predictions for this symbol and next 7 days
        stock_predictions = predictions_df[
            (predictions_df['Symbol'] == symbol) & 
            (predictions_df['Date'].str.startswith(tuple(next_7_days)))
        ]
        
        for _, row in stock_predictions.iterrows():
            date_str = row['Date'].split('T')[0] if 'T' in row['Date'] else row['Date']
            report.append(f"| {date_str} | **{row['Predicted_Action']}** | ₹{float(row['Forecasted_Price']):.2f} |")
        
        report.append("")
    
    # Monthly outlook (average signal per month)
    report.append("## Monthly Outlook")
    report.append("")
    report.append("This analysis shows the overall market sentiment aggregated by month.")
    report.append("")
    
    # Create month columns
    predictions_df['Month'] = pd.to_datetime(predictions_df['Date']).dt.strftime('%Y-%m')
    monthly_signals = predictions_df.groupby(['Month', 'Predicted_Action']).size().unstack(fill_value=0)
    
    report.append("| Month | Buy Signals | Sell Signals | Hold Signals | Market Sentiment |")
    report.append("|-------|-------------|--------------|--------------|------------------|")
    
    for month, row in monthly_signals.iterrows():
        buy_count = row.get('BUY', 0)
        sell_count = row.get('SELL', 0)
        hold_count = row.get('HOLD', 0)
        
        # Calculate market sentiment
        total = buy_count + sell_count + hold_count
        sentiment_score = (buy_count - sell_count) / total if total > 0 else 0
        
        if sentiment_score > 0.1:
            sentiment = "Bullish"
        elif sentiment_score < -0.1:
            sentiment = "Bearish"
        else:
            sentiment = "Neutral"
            
        report.append(f"| {month} | {buy_count} | {sell_count} | {hold_count} | **{sentiment}** |")
    
    report.append("")
    
    # Sector analysis
    report.append("## Sector Analysis")
    report.append("")
    report.append("### Banking & Financial Services")
    report.append("")
    
    banking_stocks = ['HDFCBANK', 'ICICIBANK', 'SBIN', 'AXISBANK', 'KOTAKBANK', 'BAJFINANCE', 'BAJAJFINSV', 'INDUSINDBK']
    banking_summary = summary_df[summary_df['Symbol'].isin(banking_stocks)]
    
    report.append("| Symbol | Recommendation | Score | Buy Count | Sell Count | Hold Count |")
    report.append("|--------|----------------|-------|-----------|------------|------------|")
    
    for _, row in banking_summary.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Buy_Count']} | {row['Sell_Count']} | {row['Hold_Count']} |")
    
    # Banking sector sentiment
    banking_buy = banking_summary['Buy_Count'].sum()
    banking_sell = banking_summary['Sell_Count'].sum()
    banking_hold = banking_summary['Hold_Count'].sum()
    banking_sentiment = (banking_buy - banking_sell) / (banking_buy + banking_sell + banking_hold)
    banking_outlook = "Bullish" if banking_sentiment > 0.1 else "Bearish" if banking_sentiment < -0.1 else "Neutral"
    
    report.append("")
    report.append(f"**Banking Sector Outlook:** {banking_outlook} (Score: {banking_sentiment:.2f})")
    report.append("")
    
    # IT sector
    report.append("### Information Technology")
    report.append("")
    
    it_stocks = ['TCS', 'INFY', 'WIPRO', 'TECHM']
    it_summary = summary_df[summary_df['Symbol'].isin(it_stocks)]
    
    report.append("| Symbol | Recommendation | Score | Buy Count | Sell Count | Hold Count |")
    report.append("|--------|----------------|-------|-----------|------------|------------|")
    
    for _, row in it_summary.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Buy_Count']} | {row['Sell_Count']} | {row['Hold_Count']} |")
    
    # IT sector sentiment
    it_buy = it_summary['Buy_Count'].sum()
    it_sell = it_summary['Sell_Count'].sum()
    it_hold = it_summary['Hold_Count'].sum()
    it_sentiment = (it_buy - it_sell) / (it_buy + it_sell + it_hold)
    it_outlook = "Bullish" if it_sentiment > 0.1 else "Bearish" if it_sentiment < -0.1 else "Neutral"
    
    report.append("")
    report.append(f"**IT Sector Outlook:** {it_outlook} (Score: {it_sentiment:.2f})")
    report.append("")
    
    # Energy sector
    report.append("### Energy & Oil")
    report.append("")
    
    energy_stocks = ['RELIANCE', 'BPCL', 'IOC', 'GAIL', 'NTPC', 'POWERGRID', 'ADANIGREEN']
    energy_summary = summary_df[summary_df['Symbol'].isin(energy_stocks)]
    
    report.append("| Symbol | Recommendation | Score | Buy Count | Sell Count | Hold Count |")
    report.append("|--------|----------------|-------|-----------|------------|------------|")
    
    for _, row in energy_summary.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Buy_Count']} | {row['Sell_Count']} | {row['Hold_Count']} |")
    
    # Energy sector sentiment
    energy_buy = energy_summary['Buy_Count'].sum()
    energy_sell = energy_summary['Sell_Count'].sum()
    energy_hold = energy_summary['Hold_Count'].sum()
    energy_sentiment = (energy_buy - energy_sell) / (energy_buy + energy_sell + energy_hold)
    energy_outlook = "Bullish" if energy_sentiment > 0.1 else "Bearish" if energy_sentiment < -0.1 else "Neutral"
    
    report.append("")
    report.append(f"**Energy Sector Outlook:** {energy_outlook} (Score: {energy_sentiment:.2f})")
    report.append("")
    
    # Auto sector
    report.append("### Automobile & Components")
    report.append("")
    
    auto_stocks = ['TATAMOTORS', 'MARUTI', 'M&M', 'EICHERMOT', 'HEROMOTOCO', 'BAJAJ-AUTO']
    auto_summary = summary_df[summary_df['Symbol'].isin(auto_stocks)]
    
    report.append("| Symbol | Recommendation | Score | Buy Count | Sell Count | Hold Count |")
    report.append("|--------|----------------|-------|-----------|------------|------------|")
    
    for _, row in auto_summary.iterrows():
        report.append(f"| **{row['Symbol']}** | {row['Recommendation']} | {float(row['Overall_Score']):.2f} | {row['Buy_Count']} | {row['Sell_Count']} | {row['Hold_Count']} |")
    
    # Auto sector sentiment
    auto_buy = auto_summary['Buy_Count'].sum()
    auto_sell = auto_summary['Sell_Count'].sum()
    auto_hold = auto_summary['Hold_Count'].sum()
    auto_sentiment = (auto_buy - auto_sell) / (auto_buy + auto_sell + auto_hold) if (auto_buy + auto_sell + auto_hold) > 0 else 0
    auto_outlook = "Bullish" if auto_sentiment > 0.1 else "Bearish" if auto_sentiment < -0.1 else "Neutral"
    
    report.append("")
    report.append(f"**Auto Sector Outlook:** {auto_outlook} (Score: {auto_sentiment:.2f})")
    report.append("")
    
    # Disclaimer
    report.append("## Disclaimer")
    report.append("")
    report.append("*This report is generated by a machine learning model for informational purposes only and does not constitute financial advice. The predictions are based on historical patterns and may not accurately reflect future market movements. Always consult with a qualified financial advisor before making investment decisions.*")
    
    # Write report to file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report))
    
    print(f"✅ Report generated at {output_file}")
    return output_file

if __name__ == "__main__":
    report_file = create_prediction_report()
    if report_file:
        print(f"🔍 You can open the report file at: {os.path.abspath(report_file)}") 